package relation;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DatabaseManager {
    private Map<String, Database> databases;
    private Database currentDatabase;

    public DatabaseManager() {
        databases = new HashMap<>();
    }
    public void selectAllFromTable(String tableName) {
        if (currentDatabase != null && currentDatabase.tableExists(tableName)) {
            Table table = currentDatabase.getTable(tableName);
            table.displayAllData();
        } else {
            System.out.println("La table '" + tableName + "' n'existe pas dans la base de données '" + currentDatabase.getName() + "'.");
        }
    }

    public void createDatabase(String name) {
        if (!databases.containsKey(name)) {
            Database db = new Database(name);
            databases.put(name, db);
            System.out.println("Base de données '" + name + "' créée avec succès.");
        } else {
            System.out.println("La base de données '" + name + "' existe déjà.");
        }
    }

    public void useDatabase(String name) {
        if (databases.containsKey(name)) {
            currentDatabase = databases.get(name);
            System.out.println("Utilisation de la base de données '" + name + "'.");
        } else {
            System.out.println("La base de données '" + name + "' n'existe pas.");
        }
    }

    public boolean createTable(String tableName, String columns) {
        if (currentDatabase != null) {
            return currentDatabase.createTable(tableName, columns);
        } else {
            System.out.println("Aucune base de données n'est sélectionnée. Utilisez 'USE nom_de_la_bdd' pour sélectionner une base de données.");
            return false;
        }
    }

    public void showTables() {
        if (currentDatabase != null) {
            currentDatabase.showTables();
        } else {
            System.out.println("Aucune base de données n'est sélectionnée. Utilisez 'USE nom_de_la_bdd' pour sélectionner une base de données.");
        }
    }

    public void executeCommand(String command) {
        if (command.toLowerCase().startsWith("create database ")) {
            String dbName = command.substring("create database ".length());
            createDatabase(dbName);
        } else if (command.toLowerCase().startsWith("use ")) {
            String dbName = command.substring("use ".length());
            useDatabase(dbName);
        } else if (command.toLowerCase().startsWith("create table ")) {
            String regex = "create table ([a-zA-Z]+) \\((.+)\\)";
            Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(command);

            if (matcher.matches()) {
                String tableName = matcher.group(1);
                String columnDefinitions = matcher.group(2);
                boolean success = createTable(tableName, columnDefinitions);
                if (success) {
                    System.out.println("Table '" + tableName + "' créée dans la base de données '" + currentDatabase.getName() + "'.");
                } else {
                    System.out.println("La table '" + tableName + "' existe déjà dans la base de données '" + currentDatabase.getName() + "'.");
                }
            } else {
                System.out.println("Commande non reconnue : " + command);
            }
        } else if (command.toLowerCase().startsWith("show tables")) {
            showTables();
        }else if (command.toLowerCase().startsWith("select * from ")) {
            String tableName = command.substring("select * from ".length());
            selectAllFromTable(tableName);
        }
        else if (command.toLowerCase().startsWith("insert into ")) {
        	Pattern pattern = Pattern.compile("INSERT INTO (\\w+) \\((.+)\\) VALUES \\((.+)\\)");

            Matcher matcher = pattern.matcher(command);

            if (matcher.matches()) {
                String tableName = matcher.group(1);
                String columnNames = matcher.group(2);
                String values = matcher.group(3);

                if (currentDatabase != null && currentDatabase.tableExists(tableName)) {
                    Table table = currentDatabase.getTable(tableName);

                    String[] columnNamesArray = columnNames.split(",");
                    String[] valuesArray = values.split(",");
                    if (columnNamesArray.length == valuesArray.length) {
                        Map<String, Object> rowData = new HashMap<>();
                        for (int i = 0; i < columnNamesArray.length; i++) {
                            String columnName = columnNamesArray[i].trim();
                            String value = valuesArray[i].trim();
                            if (table.columnExists(columnName)) {
                                String columnType = table.getColumnType(columnName);
                                if (columnType.equals("int")) {
                                    try {
                                        int intValue = Integer.parseInt(value);
                                        rowData.put(columnName, intValue);
                                    } catch (NumberFormatException e) {
                                        System.out.println("La valeur pour la colonne '" + columnName + "' doit être de type int.");
                                        return;
                                    }
                                } else if (columnType.equals("String")) {
                                    rowData.put(columnName, value);
                                }
                            } else {
                                System.out.println("La colonne '" + columnName + "' n'existe pas dans la table '" + tableName + "'.");
                                return;
                            }
                        }
                        table.insertData(rowData);
                        System.out.println("Données insérées avec succès dans la table '" + tableName + "'.");
                    } else {
                        System.out.println("Le nombre de colonnes et de valeurs ne correspond pas.");
                    }
                } else {
                    System.out.println("La table '" + tableName + "' n'existe pas dans la base de données '" + currentDatabase.getName() + "'.");
                }
            } else {
                System.out.println("Commande non reconnue : " + command);
            }
        } else {
            System.out.println("Commande non reconnue : " + command);
        }
    }

    public static void main(String[] args) {
        DatabaseManager manager = new DatabaseManager();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print("> ");
            String input = scanner.nextLine().trim();
            if (input.equalsIgnoreCase("exit")) {
                break;
            }
            manager.executeCommand(input);
        }

        scanner.close();
    }
}

class Database {
    private String name;
    private Map<String, Table> tables;

    public Database(String name) {
        this.name = name;
        tables = new HashMap<>();
    }

    public String getName() {
        return name;
    }

    public boolean createTable(String tableName, String columnDefinitions) {
        if (!tables.containsKey(tableName)) {
            Table table = new Table(columnDefinitions);
            tables.put(tableName, table);
            return true;
        } else {
            return false;
        }
    }

    public boolean tableExists(String tableName) {
        return tables.containsKey(tableName);
    }

    public Table getTable(String tableName) {
        return tables.get(tableName);
    }

    public void showTables() {
        System.out.println("Tables dans la base de données '" + name + "':");
        for (String tableName : tables.keySet()) {
            System.out.println(tableName);
        }
    }
}

class Table {
    private Map<String, String> columns;
    private List<Map<String, Object>> data;

    public Table(String columnDefinitions) {
        columns = new HashMap<>();
        data = new ArrayList<>();
        parseColumnDefinitions(columnDefinitions);
    }
    public void displayAllData() {
        for (Map<String, Object> rowData : data) {
            System.out.println(rowData);
        }
    }

    private void parseColumnDefinitions(String columnDefinitions) {
        String[] definitions = columnDefinitions.split(",");
        for (String definition : definitions) {
            String[] parts = definition.trim().split(" ");
            if (parts.length == 2) {
                String columnName = parts[0];
                String columnType = parts[1];
                if (columnType.equals("int") || columnType.equals("String")) {
                    columns.put(columnName, columnType);
                } else {
                    System.out.println("Type de colonne non pris en charge : " + columnType);
                }
            } else {
                System.out.println("Définition de colonne incorrecte : " + definition);
            }
        }
    }
    

    public void insertData(Map<String, Object> rowData) {
        data.add(rowData);
    }

    public boolean columnExists(String columnName) {
        return columns.containsKey(columnName);
    }

    public String getColumnType(String columnName) {
        return columns.get(columnName);
    }
}
